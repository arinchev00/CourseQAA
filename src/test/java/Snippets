----------------------------------------------------------------------

// Это не полный список команд, но самые распространенные//

$(".octicon-search") - Поиск в консоле разработчика уникальный класс

**Джентльменский набор команд автотестировщика**

----------------------------------------------------------------------

- Команды браузера:

open("https://google.com"); //Открытие сайта с полным URL

open("/customer/orders"); //Открытие сайта с относительным URL

open("/", AuthenticationType.BASIC, "user", "password"); //Классическая авторизация для вида с поп-апом https://the-internet.herokuapp.com/basic_auth

Selenide.back(); //Команда бэк(стрелочка Назад) в браузере

Selenide.refresh(); //Команда рефреш (обновить страницу) в браузере

Selenide.clearBrowserCookies(); //Очистка куков

Selenide.clearBrowserLocalStorage(); //Очистка локалсторидж

Selenide.confirm(); //Используется для алерт диалогов:нажатие кнопки Ok https://the-internet.herokuapp.com/javascript_alerts

Selenide.dismiss(); //Используется для алерт диалогов:нажатие кнопки Cansel

Selenide.closeWindow(); //Закрывает активную вкладку браузера

Selenide.closeWebDriver(); //Закрывает полностью браузер

Selenide.switchTo().frame("new"); //Для перехода внутрь фрейма

Selenide.switchTo().defaultContent(); //Для возврата из фрейма во внешнюю ветку

Selenide.switchTo().window("The Internet"); //Для перехода в другую вкладку браузера

----------------------------------------------------------------------

- Селекторы:

$("div").click(); //Поиск по элементу, по умолчанию ищется первый div

element("div").click(); //Поиск по элементу(для Котлин)

$("div", 2).click(); //Поиск по элементу, если нужен 3-ий div (счет идет от нуля, 0 = 1-ый, 1 = 2-ый и т.д)

$x("//h1/div").click(); //Поиск по элементу для Xpath

$(byXpath("//h1/div")).click(); //Аналог поиск по элементу CSS в обвёртке(Xpath)

$(byText("full text")).click(); //Поиск текста, ищет полный текст указанный в скобках

$(withText("ull tex")).click(); //Поиск текста по вхождению, ищет часть текста указанного в скобках

*Навигация:

$("").parent(); //Ищет вверх родительский элемент

$("").sibling(2); //Ищет вниз третий элемент-брат(сиблинг). Сиблинги находятся внутри одного элемента на одном уровне

$("").preceding(0); //Ищет вверх первый элемент-брат(сиблиг)

$("").closest("div"); //Ищет по дереву следующий элемент с тегом div

$("div").$("h1").find(byText("abc")).click(); //Пр-р: вначале находим первый элемент div-> внутри него находим первый элемент h1->далее внтури мы ищем по тексту "abc" и делаем клик

$ и find - идентичны, синонимы.

*Опционально, но не желательно:

$(byAttribute("abc", "x")).click();

$("[abc=x]").click(); //Верхнюю конструкцию(строку) можно заменить текущей строкой

$(byId("mytext")).click();

$("#mytext").click(); //Верхнюю конструкцию(строку) можно заменить текущей строкой

$(byClassName("red")).click();

$(".red").click(); //Верхнюю конструкцию(строку) можно заменить текущей строкой.

----------------------------------------------------------------------

- Действия:

$("").click(); //Клик

$("").doubleClick(); //Двойной клик

$("").contextClick(); //Клик правой кнопкой мыши

$("").hover(); //Подвести мышку к элементу на странице

$("#my-button").scrollIntoView(true); //Скролл страницы,верх кнопки будет у верхней границы видимой области

$("#my-button").scrollIntoView(false); //Скролл страницы,низ кнопки будет у нижней границы видимой области

*Операции работы с текстом:

$("").setValue("text"); //Очищает и пишет текст

$("").append("text"); //Добавляет текст (без очистки поля)

$("").clear(); //Команда для очистки из селениум, работает не всегда правильно!!!

$("").setValue(""); //Команда для очистки, работает лучше чем команда .clear

*Пр-ры работы с шорткатами(горячие клавиши):

$("div").sendKeys("c"); //Горячая клавиша "c" на элементе

actions().sendKeys("c").perform(); //Горячая клавиша "c" для всего приложения

actions().sendKeys(Keys.chord(Keys.CONTROL, "f")).perform(); //Одновременное нажатие: Ctrl + F

$("html").sendKeys(Keys.chord(Keys.CONTROL, "f")); //Тоже самое нажатие: Ctrl + F для всего документа(страницы)

*Команды нажатий:

$("").pressEnter(); //Нажатие на клавишку "Enter"

$("").pressEscape(); //Нажатие на клавишку "Esc"

$("").pressTab(); //Нажатие на клавишку "Tab"

*Эмуляция Drag&Drop(сложные действия с клавиатурой и мышью):

actions().moveToElement($("div")).clickAndHold().moveByOffset(300, 200).release().perform(); //Команда для перетаскивания мышкой объектов на другое место (может не работать из-за бага)

Пр-р работы: нашли элемент div нажали на него мышкой и не отпуская двигаем мышкой на 300 пикселей вправо и на 200 пиксей вниз и отпустили клавишу мыши.

$("abc").dragAndDropTo($("fsd")); //Первый элемент "abc" бросается на второй элемент "fsd" (команда должна работать)

*Старые действия html не работают со многими современными фреймворками:

$("").selectOption("dropdown_option"); //Выбор выпадающего списка https://the-internet.herokuapp.com/dropdown

$("").selectRadio("radio_options");

----------------------------------------------------------------------

- Проверки: //Одинаковые по смыслу, но каждая должна применяться грамматически правильно (грамматика английского)

$("").shouldBe(visible); //Элемент должен быть видимым

$("").shouldNotBe(visible); //Элемент не должен быть видимым

$("").shouldHave(text("abc")); //Должен быть текст "abc"

$("").shouldNotHave(text("abc")); //Не должен быть текст "abc"

$("").should(appear); //Элемент должен появиться

$("").shouldNot(appear); //Элемент не должен появиться

*Длинный таймаут:

$("").shouldBe(visible, Duration.ofSeconds(30)); //Ожидание элемента на странице 30 секунд

$("").waitUntil(visible, 30000); //Та же проверка, что и строка выше, но уже устарела!

----------------------------------------------------------------------

- Условия:

$("").shouldBe(visible); //Элемент должен быть видимым

$("").shouldBe(hidden); //Элемент должен быть скрытым

$("").shouldHave(text("abc")); //Должен быть текст "abc", игнорируется регистр текста

$("").shouldHave(exactText("abc")); //Должен быть текст точный, один в один совпадать

$("").shouldHave(textCaseSensitive("abc")); //Должен быть текст "abc", и должен совпадать с регистром текста

$("").shouldHave(exactTextCaseSensitive("abc")); //Должен и текст совпадать и регистр совпадать

$("").should(matchText("[0-9]abc$")); //Для сложной проверки, совпадение определенной комбинации букв

$("").shouldHave(cssClass("red")); //Должен быть класс "red"

$("").shouldHave(cssValue("font-size", "12")); //Проверяет реальные св-ва объекта (размер текста, цвет текста и т.д) В DevTools вкладка Computed

$("").shouldHave(value("25")); //Проверка инпутов. Что в определенном поле введено значение "25"

$("").shouldHave(exactValue("25")); //Проверка инпутов, точное значение

$("").shouldBe(empty); //Проверка что поле инпута пустое

$("").shouldHave(attribute("disabled")); //Проверка что какой-то атрибут с именем "disabled" находится на странице

$("").shouldHave(attribute("name", "example")); //Проверка что у атрибута "name" есть какое то значение "example"

$("").shouldHave(attributeMatching("name", "[0-9]abc$")); //Проверка что у атрибута "name" есть сложная комбинация значения "[0-9]abc$"

Атрибут = то что находится внутри элемента: Пр-р- элемент <Input , его атрибуты: type, data, role, aria-label, width и т.д

$("").shouldBe(checked); //Проверка чекбокса, включен он или нет

*Предупреждение! Проверяет только, находится ли он в DOM, а не отображается ли он! Вам это не нужно в большинстве тестов! Не путать с visible

$("").should(exist); //Проверка что элемент существует (видимый он или не видимый)

*Предупреждение! Проверяет только атрибут "отключено"! Не будет работать со многими современными фреймворками

$("").shouldBe(disabled); //Проверка что элемент отключен. Cиноним с данной: $("").shouldHave(attribute("disabled"));

$("").shouldBe(enabled); //Проверка что элемент включен

----------------------------------------------------------------------

- Коллекции (все элементы страницы):

$$("div"); //Проверка ничего не делает, пока не будет добавлено действие

*Выбор:

$$("div").filterBy(text("123")).shouldHave(size(1)); //Найти элемент div у которого текст "123" + условие с размером = 1

$$("div").excludeWith(text("123")).shouldHave(size(1)); //Противоположная проверка, исключить из проверки элемент с текстом "123" и размером = 1

Фильтровать можно по любым условиям (видимый, невидимый, атрибуты и т.д)

$$("div").first().click(); //Найти первый элемент div во всей структуре(ищет среди всех элементов). Синоним этой команды: $("div").click();(выполнится быстрее)

elements("div").first().click(); //Та же команда но для Котлин

$$("div").last().click(); //Найти последний элемент div во всей структуре

$$("div").get(1).click(); //Найти второй элемент div во всей структуре (подсчет элементов начинается с 0)

$("div", 1).click(); //Тоже самое что и команда выше, но выполнится быстрее

$$("div").findBy(text("123")).click(); //Похожа на команду filterBy(см выше), но ищет сразу по умолчанию первый элемент

*Утверждения:

$$("").shouldHave(size(0)); //Проверка коллекции на размер

$$("").shouldBe(CollectionCondition.empty); //Тоже самое что проверка выше, коллекция должна быть пустой

$$("").shouldHave(texts("Alfa", "Beta", "Gamma")); //Проверка что в коллекции ровно три элемента (проверка на вхождение, что в целом есть текст)

$$("").shouldHave(exactTexts("Alfa", "Beta", "Gamma")); //Проверка что в коллекции ровно три элемента, и они точно совпадают по тексту "Alfa", "Beta", "Gamma"

$$("").shouldHave(textsInAnyOrder("Beta", "Gamma", "Alfa")); //Проверка что в коллекции ровно три элемента, и порядок элементов не важен

$$("").shouldHave(exactTextsCaseSensitiveInAnyOrder("Beta", "Gamma", "Alfa")); //Проверка что в коллекции ровно три элемента и учитывается регистр текста

$$("").shouldHave(itemWithText("Gamma")); //Проверка с поиском одного текста(слова)

$$("").shouldHave(sizeGreaterThan(0)); //Проверка что в коллекции есть элемент с размером больше 0

$$("").shouldHave(sizeGreaterThanOrEqual(1)); //Проверка что в коллекции есть элемент с размером больше или равен 1

$$("").shouldHave(sizeLessThan(3)); //Проверка что в коллекции есть элемент с размером меньше 3

$$("").shouldHave(sizeLessThanOrEqual(2)); //Проверка что в коллекции есть элемент с размером меньше или равен 2

----------------------------------------------------------------------

- Операции с файлами: throws FileNotFoundException

File file1 = $("a.fileLink").download(); //Скачивание файла, работает только для ссылок классического(старого) типа <a href=".."> https://the-internet.herokuapp.com/download

File file2 = $("div").download(DownloadOptions.using(FileDownloadMode.FOLDER)); //Скачивание файла,более распространенный вариант, но могут быть проблемы с сеткой/селенойдом

File file = new File("src/test/resources/readme.txt"); //Создание пути для загрузки файла

$("#file-upload").uploadFile(file); //Загрузки файла

$("#file-upload").uploadFromClasspath("readme.txt"); //Версия более короче предыдущей, будет автоматом искать файл в папке resources

//После загрузки файла не забудьте нажать на кнопку сабмит(отправить)!

$("uploadButton").click(); //

----------------------------------------------------------------------

- ДжаваСкрипт:

executeJavaScript("alert('selenide')"); //Вариант запуска без аргументов

executeJavaScript("alert(arguments[0]+arguments[1])", "abc", 12); //Вариант запуска с аргументами

long fortytwo = executeJavaScript("return arguments[0]*arguments[1];", 6, 7); //Вариант который что-то возвращает из аргументов (число)

----------------------------------------------------------------------

- Команда для вкладки Console(DevTools):

setTimeout(function() {debugger},4000) - чтобы включить паузу в браузере (4000 = пауза включится через 4 секунды)